from data_structures.symbol_table import SymbolTable
from parser.productions.program import program

current_token = None
token_sequence = None
token_line = None
token_content = None
ids_table = None
nums_table = None

id_to_token = {
    0: '$',
    10: 'identifier', 11: 'number literal',
    12: ';', 13: ',', 14: '+', 15: '-', 16: '*', 17: '(', 18: ')', 19: '[', 20: ']', 21: '{',
    22: '}', 23: '!=', 24: '<', 25: '<=', 26: '>', 27: '>=', 28: '=', 29: '==', 30: '/',

    31: 'else', 32: 'if', 33: 'int', 34: 'return', 35: 'void', 36: 'while', 37: 'input', 38: 'output'
}

class SyntaxException(Exception):
    def __init__(self, msg: str):
        self.message = msg


def match(terminal: int) -> int:
    """Match function to compare current token to the expected terminal symbol.

    Args:
        terminal (int): The expected terminal symbol

    Raises:
        SyntaxException when the current token and the expected terminal are not the same.

    Returns:
        int: The resulting current token
    """

    global current_token, token_sequence, token_line, token_content
    if current_token == terminal:
        temp_token = token_sequence.pop()
        current_token = temp_token[0]

        # if the token is an id or a num, get its line from the entry
        if current_token == 10:
            entry = ids_table.get_entry_with_id(temp_token[1])
            token_line = entry.line
            token_content = entry.content
        elif current_token == 11:
            entry = nums_table.get_entry_with_id(temp_token[1])
            token_line = entry.line
            token_content = entry.content
        else:
            token_content = id_to_token[temp_token[0]]

            if current_token != 0:
                token_line = temp_token[1]

        return current_token
    else:
        raise SyntaxException(f"SyntaxException: Expected {id_to_token[terminal]} but got '{token_content}'\n\tAt line {token_line}")

def parse(token_seq: list, ids_t: SymbolTable, nums_t: SymbolTable):
    """The starting point of the parser

    Args:
        token_seq (list): A list with the token sequence generated by the scanner
        ids_t (SymbolTable): The symbol table for the ids
        nums_t (SymbolTable): The symbol table for the numbers
    """

    global current_token, token_sequence, token_line, token_content, ids_table, nums_table

    ids_table = ids_t
    nums_table = nums_t

    token_seq.append((0, -1))
    token_seq.reverse()
    token_sequence = token_seq
    temp_token = token_sequence.pop()
    current_token = temp_token[0]

    # if the token is an id or a num, get its line from the entry
    if current_token == 10:
        entry = ids_table.get_entry_with_id(temp_token[1])
        token_line = entry.line
        token_content = entry.content
    elif current_token == 11:
        entry = nums_table.get_entry_with_id(temp_token[1])
        token_line = entry.line
        token_content = entry.content
    else:
        token_line = temp_token[1]
        token_content = id_to_token[temp_token[0]]

    try:
        program()

        if current_token == 0:
            print('Syntax analysis ok')
    except SyntaxException as err:
        print(err.message)
    except Exception:
        print('syntax analysis error')
